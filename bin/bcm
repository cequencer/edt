#!/usr/bin/env node

const Block = require('ethereumjs-lib').Block;
const async = require('async');
const rlp = require('rlp');
const columnify = require('columnify');
const parseArgs = require('minimist');
const dep = require('../lib/dependant.js');

var argv = parseArgs(process.argv.slice(2), {
  boolean: ['h', 'r', 'init'],
  string: ['path', 'root'],
  alias: {
    'help': 'h',
    'path': 'p',
    'cpp': 'c',
    'node': 'n',
    'limit': 'l',
    'start': 's'
  }
});

var usageStr = 'USAGE: bcm <command> [OPTION] \n\
BlockChain Manager (bcm) allows you to export the blockchain as json \n\n';

var commands = [{
  command: 'export',
  description: 'exports the block in json format'
}];
var options = [{
  option: '-p',
  alias: '--path',
  description: 'The location to the folder which has the blockchain db'
}, {
  option: '-c',
  alias: '--cpp',
  description: 'dumps Alethzero\'s blochchain'
}, {
  option: '-n',
  alias: '--node',
  description: 'dumps node-ethereum\'s blochchain'
}, {
  option: '-l',
  alias: '--limit',
  description: 'limits number of block to dump by a given number'
}, {
  option: '-s',
  alias: '--start',
  description: 'the hash to start dumping the blockchain. By default bcm loads the best block and works backwards to the genisis hash'
}];

if (argv.help) {
  console.log(
    usageStr +
    columnify(commands) + '\n\n' +
    columnify(options)
  );
  process.exit();
}

//set the path
dep.path(argv);
var detailsDB = dep.getDB('details', argv);
var blocksDB = dep.getDB('blocks', argv);

function gestStart(args, cb) {
  if (args.start && args.start.length === 64) {
    
    cb(new Buffer(args.start, 'hex'));
  } else if (args.start) {
    getSingleBlock(args.start, cb);
  } else{
    dep.getBest(detailsDB, cb);
  }
}

function getSingleBlock(start, cb) {

  if (start.length % 2) {
    start = start + '0';
  }

  try {
    start = new Buffer(start, 'hex');
  } catch (e) {
    console.error('invalid hex string');
    process.exit();
  }

  var rs = blocksDB.createReadStream({
    keyEncoding: 'binary',
    valueEncoding: 'binary',
    gte: start,
    limit: 1
  });

  rs.on('data', function(data){
    cb(data.key);
  });
}

function getBlockChain(start, limit) {

  if (!start) {
    console.log('[]');
    process.exit();
  }

  var more = true;
  var blocks = [];
  var numBlocks = 0;

  console.log('[');

  async.whilst(function() {
    return more;
  }, function(done) {
    blocksDB.get(start, {
      keyEncoding: 'binary',
      valueEncoding: 'binary'
    }, function(err, val) {

      if(err){
        console.log(']');
        console.log(err.toString());
        process.exit();
      }

      var block = new Block(rlp.decode(val));
      var json = block.toJSON(true);

      json.hash = block.hash().toString('hex');
      console.log(JSON.stringify(json));

      start = block.header.parentHash;
      numBlocks++;

      if (block.header.number.toString('hex') === '01' || numBlocks == limit) {
        more = false;
      } else {
        console.log(',');
      }
      done();
    });
  }, function() {
    console.log(']');
  });
}

gestStart(argv, function(start){
  getBlockChain(start, argv.limit);
});
