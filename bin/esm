#!/usr/bin/env node

var fs = require('fs'),
  parseArgs = require('minimist');

const ethereum = require('ethereumjs-lib');
const Trie = ethereum.Trie;
const levelup = require('level');
const sublevel = require('level-sublevel');

var argv = parseArgs(process.argv.slice(2), {
  boolean: ['h', 'init'],
  string: ['path', 'root'],
  alias: {
    'path': 'p',
    'help': 'h',
    'cpp': 'c',
    'node': 'n'
  }
});

//set the path
require('../lib/path.js')(argv);

switch (argv._[0]) {

  case 'init':
    console.log('initializing state db');
    fs.mkdir(__dirname + '/.ethereum', function() {});
    break;

  case 'export':

    var state;
    var statePath;
    var stateDB;

    if(fs.existsSync(argv.path + 'state')){
      statePath = argv.path + 'state';
      stateDB = levelup(statePath);
    }else if(fs.existsSync(argv.path)){
      //else using sublevel
      //try level-sublevel
      statePath = argv.path;
      stateDB = sublevel(levelup(statePath));
    }else{
      console.log('invalid path, no db found');
    }

    state = new Trie(stateDB);

    require('../lib/export.js')(argv, state, stateDB);

    break;

  case 'import':
    require('../lib/import.js')(argv);
    break;

  case 'commit':
    require('../lib/commit.js')(argv);
    break;

  case 'checkout':
    require('../lib/checkout.js')(argv);
    break;

  case 'log':
    require('../lib/log.js')(argv);
    break;

  case 'account':
    require('../lib/account.js')(argv);
    break;

  case 'status':
    require('../lib/status.js')(argv);
    break;

  default:
    var helpStr = '\
    usage: import [path_to_state_dump.json] --path \n\
    --path <string> The location of a state DB\n\
    ';

    console.log(helpStr);
}
